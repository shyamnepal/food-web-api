// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_commerceBackEnd.Data;

#nullable disable

namespace ecommerceBackEnd.Migrations.NormalDb
{
    [DbContext(typeof(NormalDbContext))]
    [Migration("20230207135807_add OrderItem table ")]
    partial class addOrderItemtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("e_commerceBackEnd.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("tbl_Customer");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.DTOs.ProductDto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("descriptionn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("tbl_products");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.FoodItem", b =>
                {
                    b.Property<int>("foodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("foodId"));

                    b.Property<string>("foodImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<double>("unitPrice")
                        .HasColumnType("float");

                    b.HasKey("foodId");

                    b.ToTable("tbl_FoodItem");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.Menu", b =>
                {
                    b.Property<int>("menuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("menuId"));

                    b.Property<int>("FoodItemfoodId")
                        .HasColumnType("int");

                    b.Property<int>("foodId")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("menuId");

                    b.HasIndex("FoodItemfoodId");

                    b.ToTable("tbl_Menu");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.Order", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderID"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("pickUpDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("orderID");

                    b.HasIndex("CustomerId");

                    b.ToTable("tbl_Order");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int?>("foodId")
                        .HasColumnType("int");

                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<double>("unitPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderItemId");

                    b.HasIndex("foodId")
                        .IsUnique()
                        .HasFilter("[foodId] IS NOT NULL");

                    b.HasIndex("orderID")
                        .IsUnique();

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.Payment", b =>
                {
                    b.Property<int>("paymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paymentId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<int?>("orderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paymentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("orderId")
                        .IsUnique()
                        .HasFilter("[orderId] IS NOT NULL");

                    b.ToTable("tbl_Payment");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.Menu", b =>
                {
                    b.HasOne("e_commerceBackEnd.Model.FoodItem", "FoodItem")
                        .WithMany()
                        .HasForeignKey("FoodItemfoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.Order", b =>
                {
                    b.HasOne("e_commerceBackEnd.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.OrderItem", b =>
                {
                    b.HasOne("e_commerceBackEnd.Model.FoodItem", "FoodItem")
                        .WithOne("OrderItem")
                        .HasForeignKey("e_commerceBackEnd.Model.OrderItem", "foodId");

                    b.HasOne("e_commerceBackEnd.Model.Order", "Order")
                        .WithOne("OrderItem")
                        .HasForeignKey("e_commerceBackEnd.Model.OrderItem", "orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.Payment", b =>
                {
                    b.HasOne("e_commerceBackEnd.Model.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("e_commerceBackEnd.Model.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("e_commerceBackEnd.Model.Payment", "orderId");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.FoodItem", b =>
                {
                    b.Navigation("OrderItem")
                        .IsRequired();
                });

            modelBuilder.Entity("e_commerceBackEnd.Model.Order", b =>
                {
                    b.Navigation("OrderItem")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
